$ fq -n options
{
  "addrbase": 16,
  "arg": [],
  "argjson": [],
  "arraytruncate": 50,
  "bitsformat": "snippet",
  "bytecolors": "0-0xff=brightwhite,0=brightblack,32-126:9-13=white",
  "color": false,
  "colors": "array=white,dumpaddr=yellow,dumpheader=yellow+underline,error=brightred,false=yellow,index=white,null=brightblack,number=cyan,object=white,objectkey=brightblue,string=green,true=yellow,value=white",
  "compact": false,
  "decode_file": [],
  "decode_format": "probe",
  "decode_progress": false,
  "depth": 0,
  "displaybytes": 16,
  "expr": "options",
  "expr_eval_path": "arg",
  "expr_file": null,
  "filenames": [
    "-"
  ],
  "include_path": null,
  "join_string": "\n",
  "linebytes": 16,
  "null_input": true,
  "raw_output": false,
  "raw_string": false,
  "rawfile": [],
  "repl": false,
  "show_formats": false,
  "show_help": false,
  "show_options": false,
  "sizebase": 10,
  "slurp": false,
  "string_input": false,
  "unicode": false,
  "verbose": false
}
$ fq -o addrbase=10 -n options.addrbase
10
$ fq -o addrbase=true -n options.addrbase
16
$ fq -o arraytruncate=10 -n options.arraytruncate
10
$ fq -o arraytruncate=true -n options.arraytruncate
50
$ fq -o bitsformat=base64 -n options.bitsformat
"base64"
$ fq -o bytecolors=0-0xff=red -n options.bytecolors
"0-0xff=red"
$ fq -o color=10 -n options.color
[33mtrue[m
$ fq -o color=true -n options.color
[33mtrue[m
$ fq -o colors=number=red -n options.colors
"number=red"
$ fq -o compact=true -n options.compact
true
$ fq -o compact=aaa -n options.compact
false
$ fq -o decode_progress=false -n options.decode_progress
false
$ fq -o decode_progress=aaa -n options.decode_progress
false
$ fq -o depth=10 -n options.depth
10
$ fq -o depth=true -n options.depth
0
$ fq -o displaybytes=10 -n options.displaybytes
10
$ fq -o displaybytes=true -n options.displaybytes
16
$ fq -o expr_file=test.jq -n options.expr_file
exitcode: 2
stderr:
error: test.jq: file not found
$ fq -o include_path=path -n options.include_path
"path"
$ fq -o join_string=aaa\n -n options.join_string
"aaa\n"aaa
$ fq -o linebytes=true -n options.linebytes
16
$ fq -o null_input=true -n options.null_input
true
$ fq -o null_input=aaa -n options.null_input
true
$ fq -o raw_output=true -n options.raw_output
true
$ fq -o raw_output=aaa -n options.raw_output
false
$ fq -o raw_string=true -n options.raw_string
true
$ fq -o raw_string=aa -n options.raw_string
false
$ fq -o repl=true -n options.repl
boolean> ^D
$ fq -o sizebase=10 -n options.sizebase
10
$ fq -o sizebase=aaa -n options.sizebase
10
$ fq -o slurp=true -n options.slurp
true
$ fq -o slurp=aaa -n options.slurp
false
$ fq -o string_input=true -n options.string_input
true
$ fq -o string_input=aaa -n options.string_input
false
$ fq -o unicode=true -n options.unicode
true
$ fq -o unicode=aaa -n options.unicode
false
$ fq -o verbose=true -n options.verbose
true
$ fq -o verbose=aaa -n options.verbose
false
