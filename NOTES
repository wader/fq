
uint64 -> int .. is 64bit anyway?

automcatically add gaps/unknown?

replace hexdumo with addresview, hexview, asciiview, treeview etc?

mp3: zero padding between id3v2 and mp3frame?
[mp3 @ 0x555556c46080] Skipping 10 bytes of junk at 53241.
/Users/wader/Downloads/original/b81c8b9b.mp3

AbsPos nested decoders? 

https://id3.org/Lyrics3v2 d/04.\ deru\ -\ echos\ of\ me.mp3eru

add field in parent or by ref somehow? ogg demuxer etc

standrize names mapping?

simplifixed, essential info?








                                                                               test.mp3: mp3 (audio/mpeg) 1103 0-1103 (1103) {
00000000  49 44 33 04 00 00 00 00  00 32 54 50 45 31 00 00  |ID3......2TPE1..|   header: id3v2 (application/x-binary) 60 0-60 (60) {
00000010  00 05 00 00 03 62 6c 61  00 54 53 53 45 00 00 00  |.....bla.TSSE...|     magic: Correct ("ID3") 0-3 (3)
00000020  0f 00 00 03 4c 61 76 66  35 38 2e 34 35 2e 31 30  |....Lavf58.45.10|     version: 4 3-4 (1)
00000030  30 00 00 00 00 00 00 00  00 00 00 00 ff fb 50 00  |0.............P.|     revision: 0 4-5 (1)
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|     flags: none 5-6 (1) {
                                                                                     unsynchronisation: 0 5-5+1 (0+1)
                                                                                     extended_header: false 5+1-5+2 (0+1)
                                                                                     experimental_indicator: 0 5+2-5+3 (0+1)
                                                                                     unused: 0 5+3-6 (0+5)
                                                                                   }
                                                                                   size: 50 6-10 (4)
                                                                                   TPE1: Lead performer(s)/Soloist(s) ("TPE1") 10-25 (15) {
                                                                                     id: "TPE1" 10-14 (4)
                                                                                     size: 5 14-18 (4)
                                                                                     flags: none 18-20 (2) {
                                                                                       unused: 0 18-19+6 (1+6)
                                                                                       unsync: false 19+6-19+7 (0+1)
                                                                                       data_length_indicator: false 19+7-20 (0+1)
                                                                                     }
                                                                                     text_encoding: UTF-8 (3) 20-21 (1)
                                                                                     text: "bla" 21-25 (4)
                                                                                   }
                                                                                   TSSE: Software/Hardware and settings used for encoding ("TSSE") 25-50 (25) {
                                                                                     id: "TSSE" 25-29 (4)
                                                                                     size: 15 29-33 (4)
                                                                                     flags: none 33-35 (2) {
                                                                                       unused: 0 33-34+6 (1+6)
                                                                                       unsync: false 34+6-34+7 (0+1)
                                                                                       data_length_indicator: false 34+7-35 (0+1)
                                                                                     }
                                                                                     text_encoding: UTF-8 (3) 35-36 (1)
                                                                                     text: "Lavf58.45.100" 36-50 (14)
                                                                                   }
                                                                                   padding: Correct (padding) 50-60 (10)
                                                                                 }




DONE move cli thigns to package
DONE move deocde to not internal to have own decoders

path exp
child[0]
child[field=...]
[0]
[field=ad]
child[-1]
field~=a.*
field=\x00...


all outputs:
raw:
value:
json:
text:

tree()
@value 



FieldDecoder -> FieldDecoder


whole file hash?

FieldTryDecode?

Probe take name and figure out range?



Field
    Value
        Decoder


Decoder
    RootField
        Value
            Decoder




DecoderRegister {
    All:
    Allowed
}

range map to/from aprents? demuxers etc?

d.End ...also d.HasBifsLeft etc?

vistuluze decode relations? import paths?

d.Decode()
d.DecodeLen()
d.FieldDecode()
d.FieldDecodeLen()  .. unknown if fail

d.FieldValiateDecode()


ffmpeg -y -f lavfi -i sine -t 20ms -ac 2 -ar 44100 -metadata artist=bla test.ogg
ffmpeg -y -f lavfi -i sine -f lavfi -i testsrc -t 100ms -ac 2 -ar 44100 -metadata artist=bla test2.ogg

FieldBytesFn that uses start-stop pos to get bytes? maybe just a ui thing?


json
sql
api?

uniq paths?


auto probe sub data? mime not really needed?

bit pos

jpeg display and decode?

demuxing somehow?


web inteface?


parser args? have "lisp" parser taking script path as arg?


field without size?

FieldValue function?

refence type? goto poisioint? sample table etc?

float/double

time?

protobuf

zigzag


FieldUCompare?


Verify func set error?
Value, error field?

FieldVerifyFn -> FieldVerifyUFn ??


sub decode

demux stream?


BitBuf
BitBuf.BitBuf(213)


options, probe, force parse?

probe tool... unify media info fields? sample_rate blabla...




DONE mp3frame -> mp3_frame?
DONE tar.gz nested.. 
DONE field have a decoder value?
probe skip some? if not force?

ogg -> oggpage, vorbisframe?
buffer... list of ranges maps?

init register in All? ok? sort to be stable?

decode dont embedd? reimplement api with panics

bitreader
    return error
field dsl
    bitreader err => panic(err)? recover?
    valid check err => painc(err) if not force?
    recover?



var cpuprofile = flag.String("cpuprofile", "", "write cpu profile to `file`")
var memprofile = flag.String("memprofile", "", "write memory profile to `file`")


	if *cpuprofile != "" {
		f, err := os.Create(*cpuprofile)
		if err != nil {
			log.Fatal("could not create CPU profile: ", err)
		}
		defer f.Close() // error handling omitted for example
		if err := pprof.StartCPUProfile(f); err != nil {
			log.Fatal("could not start CPU profile: ", err)
		}
		defer pprof.StopCPUProfile()
	}

	// ... rest of the program ...

	if *memprofile != "" {
		f, err := os.Create(*memprofile)
		if err != nil {
			log.Fatal("could not create memory profile: ", err)
		}
		defer f.Close() // error handling omitted for example
		runtime.GC()    // get up-to-date statistics
		if err := pprof.WriteHeapProfile(f); err != nil {
			log.Fatal("could not write memory profile: ", err)
		}
	}


